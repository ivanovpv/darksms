/*
 * Copyright (c) Ivanov Pavel (ivanovpv@gmail.com), Egor Sarnavsky (egoretss@gmail.com) and Oleksandr Lashchenko (gsorron@gmail.com)2012-2013. All Rights Reserved.
 *    $Author: ivanovpv $
 *    $Rev: 405 $
 *    $LastChangedDate: 2013-11-05 17:14:54 +0400 (Вт, 05 ноя 2013) $
 *    $URL: https://subversion.assembla.com/svn/ivanovpv/trunk/src/ru/ivanovpv/gorets/psm/nativelib/NativeLib.java $
 */

package ru.ivanovpv.gorets.psm.nativelib;

import android.util.Log;
import ru.ivanovpv.gorets.psm.cipher.Cipher;
import ru.ivanovpv.gorets.psm.persistent.Hash;

import java.io.*;

public class NativeLib {

    static {
        System.loadLibrary("nativepsm"); //loading native libraries
    }
    public static final int HASH_SHA512 = Cipher.DIGEST_SHA512;
    public static final int HASH_WHIRLPOOL = Cipher.DIGEST_WHIRLPOOL;

    public static final int EC_GROUP_UNDEFINED = 0;
    public static final int EC_GROUP_112B = 1;
    public static final int EC_GROUP_256B = 2;
    public static final int EC_GROUP_384B = 3;

    //********************************************************************************************************
    // WARNING!
    // here goes hardcoded Java declarations of elliptic curve parameters declared in openssl/ec/ec_curve.c
    // in case of any change of underlying native elliptic code parameters - this also need to be changed
    //********************************************************************************************************
    private static final int NID_X9_62_prime_field=406;
    private static class _EC_NIST_PRIME_192 implements Serializable {
        int	field_type=NID_X9_62_prime_field,	/* either NID_X9_62_prime_field or
       				 * NID_X9_62_characteristic_two_field */
       		seed_len=20,
       		param_len=24;
        int cofactor=1;	/* promoted to BN_ULONG */
        char[] data =
	    {   0x30,0x45,0xAE,0x6F,0xC8,0x42,0x2F,0x64,0xED,0x57,	/* seed */
	        0x95,0x28,0xD3,0x81,0x20,0xEA,0xE1,0x21,0x96,0xD5,

	        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,	/* p */
	        0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,
	        0xFF,0xFF,0xFF,0xFF,
	        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,	/* a */
	        0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,
	        0xFF,0xFF,0xFF,0xFC,
	        0x64,0x21,0x05,0x19,0xE5,0x9C,0x80,0xE7,0x0F,0xA7,	/* b */
	        0xE9,0xAB,0x72,0x24,0x30,0x49,0xFE,0xB8,0xDE,0xEC,
	        0xC1,0x46,0xB9,0xB1,
	        0x18,0x8D,0xA8,0x0E,0xB0,0x30,0x90,0xF6,0x7C,0xBF,	/* x */
	        0x20,0xEB,0x43,0xA1,0x88,0x00,0xF4,0xFF,0x0A,0xFD,
	        0x82,0xFF,0x10,0x12,
	        0x07,0x19,0x2b,0x95,0xff,0xc8,0xda,0x78,0x63,0x10,	/* y */
	        0x11,0xed,0x6b,0x24,0xcd,0xd5,0x73,0xf9,0x77,0xa1,
	        0x1e,0x79,0x48,0x11,
	        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,	/* order */
	        0xFF,0xFF,0x99,0xDE,0xF8,0x36,0x14,0x6B,0xC9,0xB1,
	        0xB4,0xD2,0x28,0x31
	    };
    }

    private static class _EC_NIST_PRIME_224 implements Serializable  {
        public int	field_type=NID_X9_62_prime_field,	/* either NID_X9_62_prime_field or
       				 * NID_X9_62_characteristic_two_field */
       		seed_len=20,
       		param_len=28;
        public int cofactor=1;	/* promoted to BN_ULONG */
        char[] data=
    	{ 0xBD,0x71,0x34,0x47,0x99,0xD5,0xC7,0xFC,0xDC,0x45,	/* seed */
    	  0xB5,0x9F,0xA3,0xB9,0xAB,0x8F,0x6A,0x94,0x8B,0xC5,

    	  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,	/* p */
    	  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,
    	  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
    	  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,	/* a */
    	  0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,
    	  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,
    	  0xB4,0x05,0x0A,0x85,0x0C,0x04,0xB3,0xAB,0xF5,0x41,	/* b */
    	  0x32,0x56,0x50,0x44,0xB0,0xB7,0xD7,0xBF,0xD8,0xBA,
    	  0x27,0x0B,0x39,0x43,0x23,0x55,0xFF,0xB4,
    	  0xB7,0x0E,0x0C,0xBD,0x6B,0xB4,0xBF,0x7F,0x32,0x13,	/* x */
    	  0x90,0xB9,0x4A,0x03,0xC1,0xD3,0x56,0xC2,0x11,0x22,
    	  0x34,0x32,0x80,0xD6,0x11,0x5C,0x1D,0x21,
    	  0xbd,0x37,0x63,0x88,0xb5,0xf7,0x23,0xfb,0x4c,0x22,	/* y */
    	  0xdf,0xe6,0xcd,0x43,0x75,0xa0,0x5a,0x07,0x47,0x64,
    	  0x44,0xd5,0x81,0x99,0x85,0x00,0x7e,0x34,
    	  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,	/* order */
    	  0xFF,0xFF,0xFF,0xFF,0x16,0xA2,0xE0,0xB8,0xF0,0x3E,
    	  0x13,0xDD,0x29,0x45,0x5C,0x5C,0x2A,0x3D
    	};
    }
    private static class _EC_NIST_PRIME_384 implements Serializable {
        public int	field_type=NID_X9_62_prime_field,	/* either NID_X9_62_prime_field or
       				 * NID_X9_62_characteristic_two_field */
       		seed_len=20,
       		param_len=48;
        public int cofactor=1;	/* promoted to BN_ULONG */
    	char[] data=
        { 0xA3,0x35,0x92,0x6A,0xA3,0x19,0xA2,0x7A,0x1D,0x00,	/* seed */
    	  0x89,0x6A,0x67,0x73,0xA4,0x82,0x7A,0xCD,0xAC,0x73,

    	  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,	/* p */
    	  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    	  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    	  0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,
    	  0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,
    	  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,	/* a */
    	  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    	  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    	  0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,
    	  0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFC,
    	  0xB3,0x31,0x2F,0xA7,0xE2,0x3E,0xE7,0xE4,0x98,0x8E,	/* b */
    	  0x05,0x6B,0xE3,0xF8,0x2D,0x19,0x18,0x1D,0x9C,0x6E,
    	  0xFE,0x81,0x41,0x12,0x03,0x14,0x08,0x8F,0x50,0x13,
    	  0x87,0x5A,0xC6,0x56,0x39,0x8D,0x8A,0x2E,0xD1,0x9D,
    	  0x2A,0x85,0xC8,0xED,0xD3,0xEC,0x2A,0xEF,
    	  0xAA,0x87,0xCA,0x22,0xBE,0x8B,0x05,0x37,0x8E,0xB1,	/* x */
    	  0xC7,0x1E,0xF3,0x20,0xAD,0x74,0x6E,0x1D,0x3B,0x62,
    	  0x8B,0xA7,0x9B,0x98,0x59,0xF7,0x41,0xE0,0x82,0x54,
    	  0x2A,0x38,0x55,0x02,0xF2,0x5D,0xBF,0x55,0x29,0x6C,
    	  0x3A,0x54,0x5E,0x38,0x72,0x76,0x0A,0xB7,
    	  0x36,0x17,0xde,0x4a,0x96,0x26,0x2c,0x6f,0x5d,0x9e,	/* y */
    	  0x98,0xbf,0x92,0x92,0xdc,0x29,0xf8,0xf4,0x1d,0xbd,
    	  0x28,0x9a,0x14,0x7c,0xe9,0xda,0x31,0x13,0xb5,0xf0,
    	  0xb8,0xc0,0x0a,0x60,0xb1,0xce,0x1d,0x7e,0x81,0x9d,
    	  0x7a,0x43,0x1d,0x7c,0x90,0xea,0x0e,0x5f,
    	  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,	/* order */
    	  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    	  0xFF,0xFF,0xFF,0xFF,0xC7,0x63,0x4D,0x81,0xF4,0x37,
    	  0x2D,0xDF,0x58,0x1A,0x0D,0xB2,0x48,0xB0,0xA7,0x7A,
    	  0xEC,0xEC,0x19,0x6A,0xCC,0xC5,0x29,0x73
    	};
    }


    public static native byte[] getECPublicKey(byte[] privateKey, int ecGroup);
    public static native byte[] getECSharedKey(byte[] privateKey, byte[] publicKey, int ecGroup);
    public static native byte[] generatePK(String password, String salt, int hashType, int keySize);
    public static native byte[] generateHash(byte[] data, int hashType, int times);
    public static native byte[] getRandomBytes(int length);

    public static byte[] getECParameters(int ecGroup) {
        switch(ecGroup) {
            case EC_GROUP_112B:
                _EC_NIST_PRIME_192 h192=new _EC_NIST_PRIME_192();
                return serialize(h192);
            case EC_GROUP_256B:
                _EC_NIST_PRIME_224 h224=new _EC_NIST_PRIME_224();
                return serialize(h224);
            case EC_GROUP_384B:
                _EC_NIST_PRIME_384 h384=new _EC_NIST_PRIME_384();
                return serialize(h384);
            case EC_GROUP_UNDEFINED:
            default:
                throw new IllegalArgumentException("Illegal elliptic curve type="+ecGroup);
        }
    }

    /**
     * Convert any Java object to byte[]
     * @param obj Java object
     * @return serialized byte[]
     */
    private static byte[] serialize(Object obj) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            ObjectOutputStream os = new ObjectOutputStream(out);
            os.writeObject(obj);
        }
        catch(Exception ex) {
            Log.w("Serialize", "Error while serializing", ex);
            return null;
        }
        return out.toByteArray();
    }
}
